"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[208],{3191:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/inflow_02-178f65db3594580ae5b4f43baccb99ff.png"},4098:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/log_02-298347ed35902beb12d1ead455586764.png"},5617:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/inflow_04-4909914076604f074bb9c35e4c9b9951.png"},5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>f});var i=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach(function(n){o(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef(function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),g=o,f=u["".concat(s,".").concat(g)]||u[g]||d[g]||r;return t?i.createElement(f,a(a({ref:n},c),{},{components:t})):i.createElement(f,a({ref:n},c))});function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,a=new Array(r);a[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<r;p++)a[p]=t[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},6085:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var i=t(8168),o=(t(6540),t(5680));const r={},a="Set funnels (incoming URLs for deep links)",l={unversionedId:"how_to_use_sdk/set_inflow_url",id:"how_to_use_sdk/set_inflow_url",title:"Set funnels (incoming URLs for deep links)",description:"Support for the App Conversion Tracking SDK will be discontinued starting Thursday, August 21, 2025.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/how_to_use_sdk/set_inflow_url.md",sourceDirName:"how_to_use_sdk",slug:"/how_to_use_sdk/set_inflow_url",permalink:"/ntracker-sdk-ios/en/how_to_use_sdk/set_inflow_url",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Configure and initialize the SDK",permalink:"/ntracker-sdk-ios/en/how_to_use_sdk/configure_and_initialize"},next:{title:"Send conversion events",permalink:"/ntracker-sdk-ios/en/how_to_use_sdk/send_events"}},s={},p=[{value:"Set incoming URLs using setInflow",id:"set-incoming-urls-using-setinflow",level:2},{value:"iOS",id:"ios",level:3},{value:"SceneDelegate",id:"scenedelegate",level:4},{value:"AppDelegate",id:"appdelegate",level:4},{value:"SwiftUI app",id:"swiftui-app",level:4},{value:"Android",id:"android",level:3},{value:"Verify the SDK integration",id:"verify-the-sdk-integration",level:2}],c={toc:p},u="wrapper";function d({components:e,...n}){return(0,o.yg)(u,(0,i.A)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"set-funnels-incoming-urls-for-deep-links"},"Set funnels (incoming URLs for deep links)"),(0,o.yg)("admonition",{title:"Notice",type:"danger"},(0,o.yg)("p",{parentName:"admonition"},"Support for the App Conversion Tracking SDK will be discontinued starting Thursday, August 21, 2025.",(0,o.yg)("br",null),"\nAdvertisers currently using the SDK are advised to remove it and explore alternative solutions\u2014such as integrating with MMP(Mobile Measurement Partner)\u2014before and after the shutdown.",(0,o.yg)("br",null),"\nFor further details, please refer to the official notice sent via email.")),(0,o.yg)("p",null,"To track conversions on NAVER Ads, you need to use a deep link as the landing URL."),(0,o.yg)("p",null,"Users can reach your app through a Universal Link (iOS), App Link (Android), or Custom URL Scheme (iOS, Android). You can collect URLs for app conversions that occur through a Universal Link, App Link, or Custom URL Scheme for more accurate conversion tracking."),(0,o.yg)("p",null,"You can get incoming URL information using AppDelegate or SceneDelegate for iOS and Activity in Android Manifest for Android."),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},(0,o.yg)("strong",{parentName:"p"},"Caution")),(0,o.yg)("ul",{parentName:"blockquote"},(0,o.yg)("li",{parentName:"ul"},"To measure conversions more accurately, you should implement the ",(0,o.yg)("inlineCode",{parentName:"li"},"setInflow")," API."),(0,o.yg)("li",{parentName:"ul"},"When the ",(0,o.yg)("inlineCode",{parentName:"li"},"setInflow")," API is called, the following log data is displayed in your IDE condole (for SDK 0.2.0 or later). After the SDK is integrated, you need to check logs for traffic that flows to your app through a Universal Link, App Link, or Custom URL Scheme, in order to determine whether the API successfully works.",(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre"},"setInflow API called successfully. (inflow uri - [https://**********])\n"))),(0,o.yg)("li",{parentName:"ul"},"If you use a deep link provided by a third party\u2019s tracker, the URL information is processed by the tracker, causing NAVER\u2019s tracking information to be lost. So, the URL information should be passed using the ",(0,o.yg)("inlineCode",{parentName:"li"},"setInflow")," API as it is before being processed by the tracker."),(0,o.yg)("li",{parentName:"ul"},"To exclude organic conversions (non-ads conversions) from your conversion data, pass only the URL with \u201cgfa_click_id\u201d or \u201csa_click_id\u201d included as a query parameter using the ",(0,o.yg)("inlineCode",{parentName:"li"},"setInflow")," API."))),(0,o.yg)("h2",{id:"set-incoming-urls-using-setinflow"},"Set incoming URLs using setInflow"),(0,o.yg)("p",null,"The following code samples show basic app configurations for iOS and Android. See the code samples to learn how to set incoming URLs for your app."),(0,o.yg)("h3",{id:"ios"},"iOS"),(0,o.yg)("p",null,"Get funnel information from SceneDelegate or AppDelegate and pass it using the ",(0,o.yg)("inlineCode",{parentName:"p"},"setInflow")," API. In a SwiftUI app, you may or may not use SceneDelegate or AppDelegate, depending on your project configuration."),(0,o.yg)("h4",{id:"scenedelegate"},"SceneDelegate"),(0,o.yg)("p",null,"When using SceneDelegate, you should implement the following four cases at each different point depending on your app status.\n",(0,o.yg)("img",{alt:"Scene Dlegate Inflow \uc124\uc815",src:t(6156).A,width:"2844",height:"1470"})),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-swift"},"class SceneDelegate: UIResponder, UIWindowSceneDelegate {\n\n    func scene(_ scene: UIScene, \n               willConnectTo session: UISceneSession, \n               options connectionOptions: UIScene.ConnectionOptions) {\n        // Universal Link URL. App is not running\n        if let urlUniversalLink = connectionOptions.userActivities.first?.webpageURL {\n            NTrackerExt.setInflow(url: urlUniversalLink)\n        }\n\n        // Custom URL Scheme. App is not running\n        if let urlCustomScheme = connectionOptions.urlContexts.first?.url {\n            NTrackerExt.setInflow(url: urlCustomScheme)\n        }\n\n        // Your Codes.\n    }\n\n    func scene(_ scene: UIScene, \n               continue userActivity: NSUserActivity) {\n        // Universal Link URL. App is running or suspended in memory\n        if userActivity.activityType == NSUserActivityTypeBrowsingWeb,\n           let urlUniversalLink = userActivity.webpageURL {\n            NTrackerExt.setInflow(url: urlUniversalLink)\n        }\n\n        // Your Codes.\n}\n\n    func scene(_ scene: UIScene, \n               openURLContexts URLContexts: Set<UIOpenURLContext>) {\n        // Custom URL Scheme. App is running or suspended in memory\n        if let urlCustomScheme = URLContexts.first?.url {\n            NTrackerExt.setInflow(url: urlCustomScheme)\n        }\n\n        // Your Codes.\n    }\n\n}\n")),(0,o.yg)("h4",{id:"appdelegate"},"AppDelegate"),(0,o.yg)("p",null,"When using AppDelegate, you do not need to care about the app status. Handle cases for a Universal Link and Custom URL Scheme at the following two points."),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"App Dlegate Inflow \uc124\uc815",src:t(3191).A,width:"2610",height:"864"})),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-swift"},"class AppDelegate: UIResponder, UIApplicationDelegate {\n\n    func application(_ application: UIApplication,\n                     continue userActivity: NSUserActivity,\n                     restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {\n        // Universal Link URL\n        if userActivity.activityType == NSUserActivityTypeBrowsingWeb,\n           let urlUniversalLink = userActivity.webpageURL {\n            NTrackerExt.setInflow(url: urlUniversalLink)\n        }\n\n        // Your Codes.\n    }\n\n    func application(_ app: UIApplication,\n                     open url: URL,\n                     options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {\n        // Custom URL Scheme\n        NTrackerExt.setInflow(url: url)\n\n        // Your Codes.\n    }\n    \n}\n")),(0,o.yg)("h4",{id:"swiftui-app"},"SwiftUI app"),(0,o.yg)("p",null,"In a SwiftUI app, you can handle Universal Links and Custom URL Schemes in the same way, without determining the app status. "),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"SwiftUI Inflow \uc124\uc815",src:t(5617).A,width:"2500",height:"792"})),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-swift"},"@main\nstruct SampleApp: App {\n    \n    var body: some Scene {\n        WindowGroup {\n            ContentView()\n                .onOpenURL { url in\n                    NTrackerExt.setInflow(url: url)\n                }\n        }\n    }\n    \n}\n")),(0,o.yg)("p",null,"For more information, see the following pages:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://developer.apple.com/documentation/xcode/supporting-universal-links-in-your-app"},"Supporting universal links in your app")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://developer.apple.com/documentation/xcode/defining-a-custom-url-scheme-for-your-app"},"Defining a custom URL scheme for your app")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://developer.apple.com/documentation/swiftui/view/onopenurl(perform:)"},"onOpenURL(perform:)"))),(0,o.yg)("h3",{id:"android"},"Android"),(0,o.yg)("p",null,"For an Android app, you can process App Links and Custom URL Schemes in the same way, without determining the app status. You can also add an intent filter to specify an activity to receive the incoming URL information."),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Android Inflow \uc124\uc815",src:t(7406).A,width:"2376",height:"1112"})),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-kotlin"},"class SampleActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {  \n        super.onCreate(savedInstanceState)  \n        setContentView(R.layout.activity_main)  \n  \n        handleIntent(intent)\n    \n        // Your Codes.\n    }\n    \n    override fun onNewIntent(intent: Intent?) {  \n        super.onNewIntent(intent)  \n  \n        handleIntent(intent)  \n\n        // Your Codes.\n    }  \n  \n    private fun handleIntent(intent: Intent?) {  \n        if (intent == null) {  \n            return  \n        }  \n  \n        val appLinkAction = intent.action  \n        val appLinkData: Uri? = intent.data  \n\n        if (Intent.ACTION_VIEW == appLinkAction) {  \n            NTrackerExt.setInflow(appLinkData)  \n        }  \n\n        // Your Codes.\n    }\n}\n")),(0,o.yg)("p",null,"For more information, see ",(0,o.yg)("a",{parentName:"p",href:"https://developer.android.com/training/app-links?hl=en"},"Handling Android App Links"),"."),(0,o.yg)("h2",{id:"verify-the-sdk-integration"},"Verify the SDK integration"),(0,o.yg)("p",null,"Before publishing your app on the app store, you need to verify whether funnel information is successfully collected for traffic that flows to your app through a deep link. Follow the instructions below:"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"Add \u201cgfa_click_id\u201d to the deep link URL to your app as a query parameter. For example, if the deep link address is \u201c",(0,o.yg)("a",{parentName:"li",href:"https://deeplink.example.com/path%E2%80%9D"},"https://deeplink.example.com/path\u201d"),", add the query parameter to it, like \u201c",(0,o.yg)("a",{parentName:"li",href:"https://deeplink.example.com/path?gfa_click_id=TEST_CLICK_ID%E2%80%9D"},"https://deeplink.example.com/path?gfa_click_id=TEST_CLICK_ID\u201d"),"."),(0,o.yg)("li",{parentName:"ol"},"Click the link with the click ID added to enter the app."),(0,o.yg)("li",{parentName:"ol"},"Check logs in the IDE (XCode, Android Studio, etc.) console. Make sure that ",(0,o.yg)("inlineCode",{parentName:"li"},"enableDebugLog"),' is set to "true."',(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"If the ",(0,o.yg)("inlineCode",{parentName:"li"},"setInflow")," API is successfully called, ",(0,o.yg)("inlineCode",{parentName:"li"},'"attribution_info":{"gfa_click_id":"TEST_CLICK_ID"}')," information is added to conversion logs."),(0,o.yg)("li",{parentName:"ul"},"This information is stored on the user device and used from the start of collecting data. So, for repeated testing, you need to delete the app or app cache before running a new test.")))),(0,o.yg)("p",null,"An example of iOS log messages is as follows:\n",(0,o.yg)("img",{alt:"iOS Log",src:t(7033).A,width:"1480",height:"432"})),(0,o.yg)("p",null,"An example of Android log messages is as follows:\n",(0,o.yg)("img",{alt:"Android Log",src:t(4098).A,width:"1478",height:"426"})))}d.isMDXComponent=!0},6156:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/inflow_01-4402a558bcd64f2cefb44112113858d4.png"},7033:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/log_01-10fba38798016ec54a1a9a2ba2799192.png"},7406:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/inflow_03-82203621e1adccad0e1bad98ea1b9573.png"}}]);